<chapter id="autointerface" xreflabel="Opal Dynamic Interface Generation"> 
<title>Opal Dashboard</title>

<para>This chapter presents the Opal Dashboard, a new web interface that 
allows to monitor the status of an Opal Server, to check its usage,
and to dinamically create customized web form for job submission.</para>

<section id="autointerface-overview" xreflabel="Overview">
<title>Overview</title>

<para>Since Opal 1.9 we introduced the Opal Dashboard, a Web-based graphical
user interface that allows to monitor an Opal service, to view statistics
regarding its usage and to execute deployed applications from within a standard
browser.  Since Opal 1.9 the dashboard is automatically deployed in the same
web application along with Opal toolkit and it can be reached at <ulink type="http"
url="http://localhost:8080/opal2/dashboard">http://servername:8080/opal2/dashboard</ulink>
.</para>

<para>
The dashboard is composed of:</para>
<itemizedlist>
        <listitem><para>Summary page: it gives some general information on the installation.</para></listitem>
        <listitem><para>Statistics: it provides charts with usage statistics, errors and average execution time (it is 
        also possible to change the time rage of the charts and other parameters).</para></listitem>
        <listitem><para>List of installed applications: it lists all the installed applications (an Atom feed is also 
        available). Users can click on the link to access a submission form.</para></listitem>
        <listitem><para>Information page: it contains links to Opal web site and funding agencies.</para></listitem>
</itemizedlist>

<para> The list of installed applications is generated dynamically by
fetching in real time data from the AXIS engine.  When the user clicks on one
of the available services the Opal dashboard can display two types of forms
depending on the configuration of the specific application:</para>

<itemizedlist> 
<listitem><para >Simple submission form</para></listitem>
<listitem><para >Advanced submission form</para></listitem> 
</itemizedlist>
</section>


<section id="autointerface-simplesub"  xreflabel="Simple Submission Form">
<title>Simple Submission Form</title>

<para >If applications have been deployed following the instruction at <xref
linkend="basicinstallation"> the Opal Dashboard will display a simple form with
an input text field and an input file box.  The user should type the desired
command-line into the input text box and he can also upload an input file.
There is also an Add File button if the user wants to upload more than one
files.  The application configuration file described at  <xref
linkend="server-installation"> does not present any metadata describing the
format of the input arguments of the application. Therefore the Opal dashboard can
display to the user only the symple submission form.</para>

</section>

<section id="autointerface-advancedsub" xreflabel="Advanced submission Form">
<title>Advanced submission Form</title>

<para> It is possible to add an optional element called 'types', in the
application configuration file described at <xref
linkend="server-installation"> , which contains a description of the command
line input arguments accepted by the application. If this section of the
configuration file has been provided when the application was deployed, the
Opal dashboard can render an advanced submission form where the input fields
are customized on the inputs arguments.</para>

<section id="autointerface-typesec" xreflabel="The 'types' section">
<title>The 'types' section</title>
<para>The types section of
the application configuration file is composed of four sections (see
the code snippet below):</para>
<itemizedlist>
        <listitem><para>flags: It can contain a set of 'flag' elements. Each element
        represents an input flag for the application. These
        parameters are not ordered and are passed to the application
        using one or more characters prefixed with one or more dashes.
        Usually they are used to activate or deactivate some 
        functionality in the application (--verbose).</para></listitem>
        <listitem><para>taggedParams: It can contain a set of parameter elements.
        These elements are usually formed by a prefix (tag) and an input
        parameter (-input &lt;filename&gt;). They can appear in any
        order on the command line. The 'separator' element contains the
        character that will be used to separate the tag from the actual
        value (i.e. for -input=&lt;file_name&gt; the separator is '=', for
        -input &lt;file_name&gt; the separator is ' ')</para></listitem>
        <listitem><para>untaggedParams: It can contain a set of parameter elements.
        Each element is used to define an input parameter. The only
        difference with taggedParameters is that they are not prefixed by
        a tag. For this reason their order on the command line is
        relevant.</para></listitem>
        <listitem><para>groups: It can contain a set of 'group' elements. Each
        element defines a new group of parameters, which will be displayed
        together on the submission form. 
        </para></listitem>
        <listitem><para> These elements give the possibility to group together
        several parameters that have a similar functionality.</para></listitem>
</itemizedlist>
<para >For a detailed description of flag, param, and group tag see below.</para>

<itemizedlist>
        <listitem><para >flag: every flag
        element is used to define an input flag of the application. The
        following elements can be nested inside this:</para>
        <itemizedlist>
                <listitem><para >id: this element
                is required and it contains an internal unique identifier which
                represents this flag 
                </para></listitem>
                <listitem><para >tag: this
                required element contains the string that is used as a tag for this
                argument.</para></listitem>
                <listitem><para >default: this
                element can contain only 'true' or 'false'. It specifies if this
                flag should be automatically selected or not.</para></listitem>
                <listitem><para >textDesc: this
                element can contain an explanation of what is the functionality of
                this flag</para></listitem>
        </itemizedlist>
<screen>

  &lt;types&gt; 
        &lt;!-- list of flags --&gt; 
        &lt;flags&gt; 
            &lt;flag&gt; 
                &lt;id&gt;verbose&lt;/id&gt; 
                &lt;tag&gt;--verbose&lt;/tag&gt; 
                &lt;textDesc&gt;Provide verbose output&lt;/textDesc&gt; 
                &lt;default&gt;true&lt;/default&gt; 
            &lt;/flag&gt; 
            
            ... 
        &lt;/flags&gt;
    
</screen>
        </listitem>

        <listitem><para >param: The param
        element can be used to define a tagged or an untagged parameter
        depending from where it is nested. It can contain the following
        nested elements:</para>
        <itemizedlist>
                <listitem><para >id: this element
                is required and it contains an internal unique identifier which
                represents this parameter</para></listitem>
                <listitem><para >tag: this
                required element contains the string that is used as a tag for this
                argument. If this parameter is untagged this field must be empty</para></listitem>
                <listitem><para >default: this
                element can contain the default value for this parameters (if
                present this value will be copied into the corresponding input box)</para></listitem>
                <listitem><para >paramType: this
                is a required element which specify what is the type for this
                parameter. Its values can be: INT , BOOL, FLOAT, STRING, FILE , and
                URL</para></listitem>
                <listitem><para >ioType: when the
                paramType tag is FILE this element must be present and is used to
                specify if the file is an input or an output. Its possible values
                are: INPUT, OUTPUT, and INOUT</para></listitem>
                <listitem><para >required: this
                element can only contain the value 'true' or 'false' and it
                specifies if this parameters is mandatory or not. If it is not
                specified the default is false.</para></listitem>
                <listitem><para >value: this
                element can be repeated multiple times. If present it means that
                this parameter can assume only the values enumerated in this tags</para></listitem>
                <listitem><para >semanticType: this element is currently ignored, it will be used 
                in future for sematic validation.</para></listitem>
                <listitem><para >textDesc: this
                element should contain an explanation of what is the functionality
                of this tag</para></listitem>
        </itemizedlist>
<screen>

        &lt;!-- list of tagged parameters --&gt; 
        &lt;taggedParams&gt; 
            &lt;separator&gt;=&lt;/separator&gt; 
            &lt;param&gt; 
                &lt;id&gt;forcefield&lt;/id&gt; 
                &lt;tag&gt;--ff&lt;/tag&gt; 
                &lt;paramType&gt;STRING&lt;/paramType&gt; 
                &lt;required&gt;true&lt;/required&gt; 
                &lt;value&gt;AMBER&lt;/value&gt; 
                &lt;value&gt;CHARMM&lt;/value&gt; 
                &lt;value&gt;PARSE&lt;/value&gt; 
                &lt;value&gt;TYL06&lt;/value&gt; 
                &lt;default&gt;AMBER&lt;/default&gt; 
                &lt;textDesc&gt;The forcefield to use -- currently AMBER, CHARMM, PARSE, and TYL06 are supported.&lt;/textDesc&gt; 
            &lt;/param&gt; 
                  ...
        &lt;/taggedParams&gt; 
    
        &lt;!-- list of untagged parameters, in order --&gt; 
        &lt;untaggedParams&gt; 
            &lt;param&gt; 
                &lt;id&gt;inFile&lt;/id&gt; 
                &lt;paramType&gt;FILE&lt;/paramType&gt; 
                &lt;ioType&gt;INPUT&lt;/ioType&gt; 
                &lt;!--  &lt;required&gt;true&lt;/required&gt;   --&gt; 
                &lt;textDesc&gt;The PDB input file.&lt;/textDesc&gt; 
            &lt;/param&gt; 
                  ...
        &lt;/untaggedParams&gt; 

</screen>
        </listitem>
        <listitem><para >group: The group
        element is used to define groups of parameters. It can contain the
        following nested element:</para>
        <itemizedlist>
                <listitem><para >name: this
                element contains the internal name for this group</para></listitem>
                <listitem><para >elements: this
                element contains the list of parameters and flags that are part of
                this group</para></listitem>
                <listitem><para >required: if this element is true, it means that all the elements 
                belonging to this group are mandatory (it can only be true or false and the 
                default is false)
                </para></listitem>
                <listitem><para >exclusive: this
                element can specify if only one of the parameters belonging to this
                group can be selected mutually exclusively (it can be true or
                false)</para></listitem>
                <listitem><para >semanticType: this element is currently ignored, it will be used 
                in future for sematic validation.
                </para></listitem>
                <listitem><para>textDesc: this
                element contains a textual description that will be rendered as a
                header in the submission form for this group of parameters</para></listitem>
        </itemizedlist>

<screen>
        &lt;groups&gt; 
          &lt;group&gt; 
            &lt;name&gt;inputParam&lt;/name&gt; 
            &lt;elements&gt;inFile inId&lt;/elements&gt; 
            &lt;required&gt;true&lt;/required&gt; 
            &lt;exclusive&gt;true&lt;/exclusive&gt; 
            &lt;textDesc&gt;Input file to be used (choose one of the two options)&lt;/textDesc&gt; 
          &lt;/group&gt; 
                ...
        &lt;/groups&gt; 
    &lt;/types&gt; 
</screen>
        </listitem>
    </itemizedlist>

</section>
</section>
</chapter>
