<chapter id="appendix"  xreflabel="Appendix">
<title>Appendix</title>

<section id="security" xreflabel="Setting up GSI-based Security for Opal">
<title>Setting up GSI-based Security for Opal</title>

<para>This section explains how to configure Opal in order to use GSI to autheticate clients.</para>

<orderedlist>
  <listitem><para>Create a globus-based PEM server certificate and
  unencrypted private key for the tomcat server (consult the documentation
  of your CA software to help you with this step). </para></listitem>

  <listitem><para>Make sure that Opal has been installed successfully. If not, do so by
  running the following command:
  <screen>
    ant install </screen>
  </para></listitem>

  <listitem><para>To enable GSI HTTPS in Tomcat there are two different procedures 
  depending on your version of Tomcat. 
  If you are using 5.0.X, you can start from the sample etc/server.xml provided
  (works for version 5.0.30). The following snippets are responsible for
  enabling https:
  <screen>

   &lt;Service name="Catalina"&gt;
    ...
    &lt;Connector className="org.globus.tomcat.coyote.net.HTTPSConnector"
               port="8443" maxThreads="150" minSpareThreads="25" maxSpareThreads="75"
	       enableLookups="false" disableUploadTimeout="true" 
	       acceptCount="100" clientAuth="true"
	       debug="3" scheme="https"
               autoFlush="true" encryption="true"
               cert="/path/to/certificate/file"
               key="/path/to/private/key/file"
               cacertdir="/path/to/ca/certificates/directory" /&gt;
    ...
    &lt;Engine name="Catalina" defaultHost="localhost" debug="0"&gt;
      ....
      &lt;Valve className="org.globus.tomcat.coyote.valves.HTTPSValve"/&gt;
      ....
    &lt;/Engine&gt;
   &lt;/Service&gt;
  </screen>
  </para>

  <para>Make sure that the cert and key points correctly to the server
  certificate and key generated in Step 1, and that the cacertdir points to
  your list of trusted CAs.
  </para>

  <para>If you are using Tomcat 5.5.X you should modify the server.xml in 
  the following way:

  <screen>

   &lt;Service name="Catalina"&gt;
    ...

     &lt;Connector
         className="org.globus.tomcat.coyote.net.HTTPSConnector"
         port="8443" maxThreads="150"
         minSpareThreads="25" maxSpareThreads="75"
         autoFlush="true" disableUploadTimeout="true"
         scheme="https" enableLookups="true"
         acceptCount="10" debug="0"
         protocolHandlerClassName="org.apache.coyote.http11.Http11Protocol"
         socketFactory="org.globus.tomcat.catalina.net.BaseHTTPSServerSocketFactory"
         proxy="/path/to/proxy/file" cert="/path/to/certificate/file"
         key="/path/to/private/key/file"
         cacertdir="/path/to/ca/certificates/directory"
         encryption="true"/&gt;

     ...
     &lt;Engine name="Catalina" defaultHost="localhost" debug="0"&gt;
      ....
      &lt;Valve className="org.globus.tomcat.coyote.valves.HTTPSValve55"/&gt;
      ....
     &lt;/Engine&gt; 
   </screen>
   </para>

    <para>The parameters proxy, cert, key and cacertdir should point to your
    local files. Furthermore, if you are using a proxy, do not use the
    cert/key combination - in other words, they are mutually exclusive. The
    encryption attribute is also optional (defaults to true if not set).
    </para></listitem>

  <listitem><para>To enable grid-map authorization of clients, add the following XML
  fragment inside the <filename>&lt;requestFlow/&gt;</filename> element of the
  <filename>&lt;globalConfiguration/&gt;</filename> in
  $CATALINA_HOME/webapps/opal2/WEB-INF/server-config.wsdd.
  <screen>
   &lt;handler type="java:edu.sdsc.nbcr.common.GridMapAuthHandler"&gt;
    &lt;parameter name="gridmap" value="/path/to/grid-mapfile"/&gt;
   &lt;/handler&gt; </screen>
  </para>
  
  <para>Make sure that the value points to a valid grid-map file. To authorize a
  client to use the service, add an entry into the grid-map file with a
  mapping between the client's DN and a local user. Since all jobs are being
  launched as the app_user, map all client DN's to the generic app_user, e.g
  the following is an entry in a grid-map file:
  <screen>
   "/C=US/O=nbcr/OU=sdsc/CN=app_user" app_user </screen>
  </para>
  
  <para>Instead, if you would like to authorize based on a list of acceptable
  CAs, then you must enable the ca-map authorization of clients. To do so,
  add the following XML fragment inside the <filename>&lt;requestFlow/&gt;</filename>
  element of the <filename>&lt;globalConfiguration/&gt;</filename> in
  $CATALINA_HOME/webapps/opal/WEB-INF/server-config.wsdd.
  <screen>
   &lt;handler type="java:edu.sdsc.nbcr.common.CAAuthHandler"&gt;
    &lt;parameter name="ca-map" value="/path/to/ca-mapfile"/&gt;
   &lt;/handler&gt; </screen>
  </para>
  
  <para>Make sure that the value points to a valid ca-map file. To authorize a
  client to use the service, add an entry into the ca-map file with the DN
  for the client's CA, e.g. the following is an entry in a ca-map file:
  <screen>
   "C=US,O=nbcr,OU=sdsc,CN=Certificate Manager" NBCR </screen>
  </para></listitem>
  
  <listitem><para>Restart the Tomcat server for the configurations to take effect.</para></listitem>
  
  <listitem><para>Create a globus-based PEM certificate for the client, and create a
  limited-lifetime proxy by performing a "grid-proxy-init". Before invoking
  the client, make sure that the X509_USER_PROXY system property is set
  correctly to the location of the generated proxy. You may launch a job
  using GSI HTTPS as follows:

  <screen>
    java -DX509_USER_PROXY=$X509_USER_PROXY edu.sdsc.nbcr.opal.GenericServiceClient \
                 -l https://localhost:8443/opal2/services/Pdb2pqrServicePort \
                 -r launchJob \
                 -a "--ff=amber sample.pdb output.pqr" \
                 -f samples/sample.pdb
  </screen>
  </para>

  <para>You may need to ensure that both the client and the server trust
  each others' CA's (by adding entries into the .globus/certificates and
  /etc/grid-security/certificates directories respectively, if need be).
  The GenericServiceClient class shows how the user credentials can be set
  programmatically inside a client stub in order to enable GSI HTTPS.
  </para></listitem>

  <listitem><para>Note that the Opal dashboard will not function out of the
  box when GSI-based mutual authentication is being used. This is because
  the Opal server will reject clients that are not authenticated. You will
  need to import your client certificate or proxy into your Web browser to
  be able to authenticate to the Opal server. The procedure for this varies
  from one browser to another. Please follow the documentation for your own
  specific Web browsers.</para></listitem>

</orderedlist>
</section>

<section id="wsdl-gen" xreflabel="wsdl-gen">
<title>Automatic WSDL Generation</title>

<para>Text for auto wsdl generation goes here.</para>
</section>

<section id="ip-limits" xreflabel="ip-limits">
<title>Configuring IP-based Restrictions for Job Submission</title>

<para>Text for IP-based restrictions goes here.</para>
</section>

<section id="sample-appconfig" xreflabel="Sample Application Configuration File">
<title>Sample Application Configuration File</title>

<para>This example shows how to write the Opal submission configuration file for
the <ulink type="http" url="http://pdb2pqr.sourceforge.net/">PDB2PQR</ulink>
program, which is designed to automate many of the common tasks of
preparing structures for continuum electrostatics calculations, by
providing a platform-independent utility for converting protein files in
PDB format to PQR format. Located at $OPAL_HOME/configs/pdb2pqr_config.xml,
it includes advanced features such as the specification of command-line
arguments.

<screen>
&lt;appConfig xmlns="http://nbcr.sdsc.edu/opal/types"
           xmlns:xsd="http://www.w3.org/2001/XMLSchema"&gt;
  &lt;!-- metadata about the application being wrapped --&gt;
  &lt;metadata appName="PDB2PQR"&gt;
    &lt;usage&gt;PDB2PQR is a Python software package that automates many
           of the common tasks of preparing structures for continuum
           electrostatics calculations, providing a platform-independent
           utility for converting protein files in PDB format to PQR
           format.&lt;/usage&gt;
    &lt;info&gt;
    &lt;![CDATA[
         python pdb2pqr.py [options] --ff={forcefield} {path} {output-path}
 
         The required arguments are as follows:
         
         &lt;forcefield&gt;
             The forcefield to use -- currently AMBER (AMBER99, Wang J, et
             al, 2000), CHARMM (CHARMM27, MacKerell AD Jr, et al, 1998),
             PARSE (PARSE, Sitkoff D, et al, 1994), and TYL06 (Tan C, et
             al, 2006) are supported.
         &lt;path&gt;
             The path to the PDB file or an ID to obtain from the PDB archive
         &lt;output-path&gt;
             The desired output name of the PQR file to be generated
         
         Optional command-line arguments are:
         
         --nodebump
             Do not perform the debumping operation
         --noopt
             Do not perform hydrogen bonding network optimization
         --chain
             Keep the chain ID in the output PQR file 
         --assign-only
             Only assign charges and radii - do not add atoms, debump, or optimize.
         --clean
             Do no optimization, atom addition, or parameter assignment, just return the 
             original PDB file in aligned format.
         --ffout=&lt;name&gt;
             Instead of using the standard canonical naming scheme for
             residue and atom names,use the names from the given forcefield.
         --with-ph=&lt;ph&gt;
             Use PROPKA to calculate pKas and apply them to the molecule given the pH value. 
             Actual PropKa results will be output to &lt;output-path&gt;.propka.
         --ligand=&lt;mol2 file&gt;
             Use the PDB2PKA package to generate parameters for the specific ligand in MOL2 
             format. MOL2-format ligands can be generated using PRODRG server or from within 
             some molecular modeling packages
         --apbs-input
             Create a template APBS input file based on the generated PQR file.
         --verbose (-v)
             Print information to stdout
         --help (-h)
             Display the usage information
         
         Additional optional command-line arguments from the extensions directory are:
         
         --chi
             Print the per-residue backbone chi angle to {output-path}.chi
         --phi
             Print the per-residue backbone phi angle to {output-path}.phi
         --psi
             Print the per-residue backbone psi angle to {output-path}.psi
         --rama
             Print the per-residue phi and psi angles to {output-path}.rama
             for Ramachandran plots
         --hbond
             Print a list of hydrogen bonds to {output-path}.hbond  
         
    ]]&gt;
    &lt;/info&gt;
    
    &lt;!-- information about command-line arguments --&gt;
    &lt;types&gt; 
        &lt;!-- list of flags --&gt;
        &lt;flags&gt;
            &lt;flag&gt;
                &lt;id&gt;verbose&lt;/id&gt;
                &lt;tag&gt;--verbose&lt;/tag&gt;
                &lt;textDesc&gt;Provide verbose output&lt;/textDesc&gt;
                &lt;default&gt;true&lt;/default&gt;
            &lt;/flag&gt;
            &lt;flag&gt;
                &lt;id&gt;nodebump&lt;/id&gt;
                &lt;tag&gt;--nodebump&lt;/tag&gt;
                &lt;textDesc&gt;Do not perform the debumping operation&lt;/textDesc&gt;
            &lt;/flag&gt;
            &lt;flag&gt;
                &lt;id&gt;noopt&lt;/id&gt;
                &lt;tag&gt;--noopt&lt;/tag&gt;
                &lt;textDesc&gt;Do not perform hydrogen bonding network optimization&lt;/textDesc&gt;
            &lt;/flag&gt;
            &lt;flag&gt;
                &lt;id&gt;chain&lt;/id&gt;
                &lt;tag&gt;--chain&lt;/tag&gt;
                &lt;textDesc&gt;Keep the chain ID in the output PQR file&lt;/textDesc&gt;
            &lt;/flag&gt;
            &lt;flag&gt;
                &lt;id&gt;assign-only&lt;/id&gt;
                &lt;tag&gt;--assign-only&lt;/tag&gt;
                &lt;textDesc&gt;Only assign charges and radii - 
		do not add atoms, debump, or optimize&lt;/textDesc&gt;
            &lt;/flag&gt;
            &lt;flag&gt;
                &lt;id&gt;clean&lt;/id&gt;
                &lt;tag&gt;--clean&lt;/tag&gt;
                &lt;textDesc&gt;Do no optimization, atom addition, or
    		parameter assignment, just return the original PDB file in
    		aligned format&lt;/textDesc&gt;
            &lt;/flag&gt;
            &lt;flag&gt;
                &lt;id&gt;apbs-input&lt;/id&gt;
                &lt;tag&gt;--apbs-input&lt;/tag&gt;
                &lt;textDesc&gt;Create a template APBS input file based on the generated PQR file&lt;/textDesc&gt;
            &lt;/flag&gt;
    
            &lt;flag&gt;
                &lt;id&gt;chi&lt;/id&gt;
                &lt;tag&gt;--chi&lt;/tag&gt;
                &lt;textDesc&gt;Print the per-residue backbone chi angle to {output-path}.chi&lt;/textDesc&gt;
            &lt;/flag&gt;
            &lt;flag&gt;
                &lt;id&gt;phi&lt;/id&gt;
                &lt;tag&gt;--phi&lt;/tag&gt;
                &lt;textDesc&gt;Print the per-residue backbone phi angle to {output-path}.phi&lt;/textDesc&gt;
            &lt;/flag&gt;
            &lt;flag&gt;
                &lt;id&gt;rama&lt;/id&gt;
                &lt;tag&gt;--rama&lt;/tag&gt;
                &lt;textDesc&gt;Print the per-residue phi and psi angles to
                {output-path}.rama for Ramachandran plots&lt;/textDesc&gt;
            &lt;/flag&gt;
            &lt;flag&gt;
`               &lt;id&gt;psi&lt;/id&gt;
                &lt;tag&gt;--psi&lt;/tag&gt;
                &lt;textDesc&gt;Print the per-residue backbone psi angle to {output-path}.psi&lt;/textDesc&gt;
            &lt;/flag&gt;
            &lt;flag&gt;
                &lt;id&gt;hbond&lt;/id&gt;
                &lt;tag&gt;--hbond&lt;/tag&gt;
                &lt;textDesc&gt;Print a list of hydrogen bonds to {output-path}.hbond&lt;/textDesc&gt;
            &lt;/flag&gt;
        &lt;/flags&gt;
    
        &lt;!-- list of tagged parameters --&gt;
        &lt;taggedParams&gt;
            &lt;separator&gt;=&lt;/separator&gt;
            &lt;param&gt;
                &lt;id&gt;forcefield&lt;/id&gt;
                &lt;tag&gt;--ff&lt;/tag&gt;
                &lt;paramType&gt;STRING&lt;/paramType&gt;
                &lt;required&gt;true&lt;/required&gt;
                &lt;value&gt;AMBER&lt;/value&gt;
                &lt;value&gt;CHARMM&lt;/value&gt;
                &lt;value&gt;PARSE&lt;/value&gt;
                &lt;value&gt;TYL06&lt;/value&gt;
                &lt;default&gt;AMBER&lt;/default&gt;
                &lt;textDesc&gt;The forcefield to use -- currently AMBER, CHARMM, PARSE, and TYL06 are supported.&lt;/textDesc&gt;
            &lt;/param&gt;
            &lt;param&gt;
                &lt;id&gt;ffout&lt;/id&gt;
                &lt;tag&gt;--ffout&lt;/tag&gt;
                &lt;paramType&gt;STRING&lt;/paramType&gt;
                &lt;value&gt;AMBER&lt;/value&gt;
                &lt;value&gt;CHARMM&lt;/value&gt;
                &lt;value&gt;PARSE&lt;/value&gt;
                &lt;value&gt;TYL06&lt;/value&gt;                
                &lt;textDesc&gt;Instead of using the standard canonical
        	naming scheme for residue and atom, use names from the given
        	forcefield&lt;/textDesc&gt;
            &lt;/param&gt;
            &lt;param&gt;
                &lt;id&gt;with-ph&lt;/id&gt;
                &lt;tag&gt;--with-ph&lt;/tag&gt;
                &lt;paramType&gt;STRING&lt;/paramType&gt;
                &lt;textDesc&gt;Use PROPKA to calculate pKas and apply them
       		to the molecule given the pH value&lt;/textDesc&gt;
            &lt;/param&gt;
            &lt;param&gt;
                &lt;id&gt;ligand&lt;/id&gt;
                &lt;tag&gt;--ligand&lt;/tag&gt;
                &lt;paramType&gt;FILE&lt;/paramType&gt;
                &lt;ioType&gt;OUTPUT&lt;/ioType&gt;
                &lt;textDesc&gt;Use the PDB2PKA package to generate
        	parameters for the specific ligand in MOL2 format.&lt;/textDesc&gt;
            &lt;/param&gt;
        &lt;/taggedParams&gt;
    
        &lt;!-- list of untagged parameters, in order --&gt;
        &lt;untaggedParams&gt;
            &lt;param&gt;
                &lt;id&gt;inFile&lt;/id&gt;
                &lt;paramType&gt;FILE&lt;/paramType&gt;
                &lt;ioType&gt;INPUT&lt;/ioType&gt;
                &lt;!--  &lt;required&gt;true&lt;/required&gt;   --&gt;
                &lt;textDesc&gt;&lt;![CDATA[ The PDB input file (for
        	testing you can download
        	http://www.rcsb.org/pdb/files/1a1p.pdb)]]&gt;&lt;/textDesc&gt;
            &lt;/param&gt;
            &lt;param&gt;
                &lt;id&gt;inId&lt;/id&gt;
                &lt;paramType&gt;STRING&lt;/paramType&gt;
                &lt;ioType&gt;INPUT&lt;/ioType&gt;
                &lt;!-- &lt;required&gt;true&lt;/required&gt; --&gt;
                &lt;textDesc&gt;The ID to use to retrive the input file
        	from the PDB archive (for testing use '1a1p')&lt;/textDesc&gt;
            &lt;/param&gt;
            &lt;param&gt;
                &lt;id&gt;output-file&lt;/id&gt;
                &lt;paramType&gt;FILE&lt;/paramType&gt;
                &lt;ioType&gt;OUTPUT&lt;/ioType&gt;
                &lt;required&gt;true&lt;/required&gt;
                &lt;default&gt;output.pqr&lt;/default&gt;
                &lt;textDesc&gt;The desired output name of the PQR file to
        	be generated&lt;/textDesc&gt;
            &lt;/param&gt;
        &lt;/untaggedParams&gt;

        &lt;!-- grouping of parameters --&gt;
        &lt;groups&gt;
          &lt;group&gt;
            &lt;name&gt;inputParam&lt;/name&gt;
            &lt;elements&gt;inFile inId&lt;/elements&gt;
            &lt;required&gt;true&lt;/required&gt;
            &lt;exclusive&gt;true&lt;/exclusive&gt;
            &lt;textDesc&gt;Input file to be used (choose one of the two
            options)&lt;/textDesc&gt;
          &lt;/group&gt;
          &lt;group&gt;
            &lt;name&gt;otherRequiredGroup&lt;/name&gt;
            &lt;elements&gt;forcefield output-file&lt;/elements&gt;
            &lt;required&gt;true&lt;/required&gt;
            &lt;textDesc&gt;Other required parameters&lt;/textDesc&gt;
          &lt;/group&gt;
          &lt;group&gt;
            &lt;name&gt;ffoutGroup&lt;/name&gt;
            &lt;elements&gt;ffout&lt;/elements&gt;
            &lt;required&gt;false&lt;/required&gt;
            &lt;textDesc&gt;Output naming schema to be used&lt;/textDesc&gt;
          &lt;/group&gt;
          &lt;group&gt;
            &lt;name&gt;perResidueGroup&lt;/name&gt;
            &lt;elements&gt;chi phi psi rama hbond&lt;/elements&gt;
            &lt;textDesc&gt;Additional optional command-line arguments from
            the extensions directory are&lt;/textDesc&gt;
          &lt;/group&gt;
          &lt;group&gt;
            &lt;name&gt;otherParamGroup&lt;/name&gt;
            &lt;elements&gt;with-ph ligand verbose nodebump noopt chain
            assign-only clean apbs-input&lt;/elements&gt;
            &lt;required&gt;false&lt;/required&gt;
            &lt;textDesc&gt;Other parameters&lt;/textDesc&gt;
          &lt;/group&gt;
        &lt;/groups&gt;
    &lt;/types&gt;

  &lt;/metadata&gt;

  &lt;!-- location of execution on the server --&gt;
  &lt;binaryLocation&gt;/usr/local/bin/pdb2pqr.py&lt;/binaryLocation&gt;
  
  &lt;!-- list of default arguments --&gt;
  &lt;defaultArgs&gt;--verbose&lt;/defaultArgs&gt;

  &lt;!-- whether to validate command-line arguments using type information above --&gt;
  &lt;validateArgs&gt;true&lt;/validateArgs&gt;

  &lt;!-- overrule default job manager, if need be --&gt;
  &lt;jobManagerFQCN&gt;edu.sdsc.nbcr.opal.manager.ForkJobManager&lt;/jobManagerFQCN&gt;

  &lt;!-- whether this application is serial or parallel --&gt;
  &lt;parallel&gt;false&lt;/parallel&gt;
&lt;/appConfig&gt;
</screen>
</para>

</section>

<section id="proxy-script" xreflabel="proxy-script">
<title>Sample Script for Generating Proxy</title>

<para>
This sample script <filename>newcert.sh</filename> gets the 
certificate from the proxy. This is useful if the Opal job managers are
configured to use a proxy to submit jobs on behalf of the user.  Note
that the <command>-t 168</command> means that the certificate will be 
valid for 168 hours or 7 days.  The default certificate life time is
only 12 hours.
<screen>
#!/bin/bash

export GLOBUS_LOCATION=/opt/gt4
. $GLOBUS_LOCATION/etc/globus-user-env.sh
. $GLOBUS_LOCATION/globus-devel-env.sh

echo $password | $GLOBUS_LOCATION/bin/myproxy-logon -t 168 -s myproxy.teragrid.org -S &amp;&gt; logfile.log
echo running `date`&gt;&gt;logfile.log

cat logfile.log &gt;&gt; get_cert.log
</screen>
</para>

<para>
You may add the above script to crontab to run 
<filename>newcert.sh</filename> at the beginning
of every hour.
<screen>
0 * * * * $path_to_newcert_sh
</screen>
</para>

</section>

</chapter>