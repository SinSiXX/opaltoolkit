<chapter id="deploy" xreflabel="Deploying Applications">
<title>Opal Configuration Files</title>

<para>
This chapter describes how to use an Opal configuration xml file to deploy a web service.
</para>

<section id="config"  xreflabel="Opal Configuration File">
<title>Opal Configuration File</title>

<para>Create a configuration file for your application. For example, you
can download the <ulink type="http" url="http://pdb2pqr.sourceforge.net/">PDB2PQR</ulink>
program, which is designed to automate many of the common tasks of
preparing structures for continuum electrostatics calculations, by
providing a platform-independent utility for converting protein files in
PDB format to PQR format. A sample configuration file for the same, located
in $OPAL_HOME/configs/pdb2pqr_config.xml, is shown below.

<screen>
&lt;appConfig xmlns="http://nbcr.sdsc.edu/opal/types"
           xmlns:xsd="http://www.w3.org/2001/XMLSchema"&gt;
  &lt;metadata appName="PDB2PQR"&gt;
    &lt;usage&gt;
    PDB2PQR is a Python software package that automates many of the common
    tasks of preparing structures for continuum electrostatics
    calculations, providing a platform-independent utility for converting
    protein files in PDB format to PQR format
    &lt;/usage&gt;

    &lt;info xsd:type="xsd:string"&gt;
         python pdb2pqr.py [options] --ff={forcefield} {path} {output-path}
 
         The required arguments are as follows:
         ...         
         &lt;path&gt;
             The path to the PDB file or an ID to obtain from the PDB archive
         &lt;output-path&gt;
             The desired output name of the PQR file to be generated
         
         Optional command-line arguments are:
         
         --nodebump
             Do not perform the debumping operation
         ...
     &lt;/info&gt;
  &lt;/metadata&gt;
  &lt;binaryLocation&gt;/Users/sriramkrishnan/bin/pdb2pqr.py&lt;/binaryLocation&gt;
  &lt;defaultArgs&gt;&lt;/defaultArgs&gt;
  &lt;parallel&gt;false&lt;/parallel&gt;
  &lt;validateArgs&gt;false&lt;/validateArgs&gt;
  &lt;jobManagerFQCN&gt;edu.sdsc.nbcr.opal.manager.ForkJobManager&lt;/jobManagerFQCN&gt;
&lt;/appConfig&gt;
</screen>
</para>

<para>The configuration consists of a top level element <emphasis
role="italics">appConfig</emphasis>, which contains <emphasis
role="italics">metadata</emphasis>, <emphasis
role="italics">binaryLocation</emphasis>, <emphasis
role="italics">defaultArgs</emphasis>, <emphasis
role="italics">parallel</emphasis>, <emphasis
role="italics">validateArgs</emphasis>, and <emphasis
role="italics">jobManagerFQCN</emphasis> elements. The metadata consists of
<emphasis role="italics">usage</emphasis>, which is a string specifying how
the application is to be invoked, and an array of optional application
information specified as <emphasis role="italics">info</emphasis> elements.
It also contains an optional <emphasis role="italics">types</emphasis>
element, which we can ignore for now (more information about the types
element can be found from our <xref linkend="opalgui-advancedsub"> page).
In the above file, the various options that can be used with the
application are specified within the metadata.</para>

<para>The binaryLocation specifies the location of the application binary -
note that this has to be the location of a <emphasis
role="italics">single</emphasis> executable. No arguments may be specified
here. However, default arguments that need to be used for every run can be
specified inside the defaultArgs element. The parallel element specifies if
an application is parallel or not. The validateArgs and jobManagerFQCN
elements are optional. If set to true, the validateArgs element instructs
Opal to use the optional command-line specification (within types) to
validate arguments prior to execution. The jobManagerFQCN element
over-rides the default job manager, and can be set to the fully qualified
classname of an Opal job manager. By default, the FQCNs for job managers
provided by Opal are
<filename>edu.sdsc.nbcr.opal.manager.ForkJobManager</filename> (for basic
fork/system exec),
<filename>edu.sdsc.nbcr.opal.manager.DRMAAJobManager</filename> (for
DRMAA), <filename>edu.sdsc.nbcr.opal.manager.GlobusJobManager</filename>
(for Globus on a local cluster),
<filename>edu.sdsc.nbcr.opal.manager.RemoteGlobusJobManager</filename> (for
Globus job submissions to a remote cluster), 
<filename>edu.sdsc.nbcr.opal.manager.CondorJobManager</filename> (for 
submitting jobs directly to Condor) and 
<filename>edu.sdsc.nbcr.opal.manager.CSFJobManager</filename> (for using the 
Community Scheduler Framework). Use the pdb2pqr_config.xml as
a guideline to write configurations for your particular
applications.</para> 

</section>

<section id="deployment"  xreflabel="Deployment an Opal Service">
<title>Deploying an Opal Service</title>

<para>Deploy the services inside Tomcat, by changing to the $OPAL_HOME
directory, and running the following command:
<screen>
    $ANT_HOME/bin/ant deploy -DserviceName=&lt;serviceName&gt; -DappConfig=&lt;appConfig&gt;
</screen>
</para>

<para>For example, to deploy the PDB2PQR service, you would type the following
command:
<screen>
    $ANT_HOME/bin/ant deploy -DserviceName=Pdb2pqrServicePort \
                 -DappConfig=$PWD/configs/pdb2pqr_config.xml
</screen>
</para>

<para>Note that you can undeploy your service at any time by running the 
following command:
<screen>
    $ANT_HOME/bin/ant undeploy -DserviceName=&lt;serviceName&gt;
</screen>
</para>

<para>Both the deploy and undeploy targets accept a
<filename>-DappVersion</filename> parameter. If this is used, the service
URL deployed is of the form
<filename>serviceName_appVersion</filename>.</para>

<para>If you plan on using the service with large inputs and outputs, it is a
good idea to increase the heap size being used by the JVM. This can be done
by setting the <emphasis role="italics">JAVA_OPTS</emphasis> environment variable to <emphasis role="ital
ics">-Xmx1024m</emphasis>,
and restarting Tomcat. This increases the heap size to 1GB. If all went
well until this step, the services are running and ready to be used. Test
them by running the client, described in the following section.</para>

<para>The service creates new working directories for every execution. These
working directories are not deleted automatically, so they must be
periodically cleaned up. You may use the script
$OPAL_HOME/etc/cleanup.sh to do so - you will have to modify it to point
to your Tomcat installation (and optionally modify the number of days to
retain scratch directories).</para>

</section>

</chapter>
