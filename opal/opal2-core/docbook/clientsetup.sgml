<chapter id="clientsetup"  xreflabel="Client Set Up Guide">
<title>Command-line Client Installation</title>

<para>In this chapter we explain how to install Opal command-line
client version &version;.</para>

<simplesect>
<title>Prerequisites</title>

<para>
The source distribution can be used to install the server and the
client on Unix and Windows platforms.  See <xref linkend="server-client-pre">.
</para>

</simplesect>

<simplesect>
<title>Installation Instructions</title>

<orderedlist>
<listitem><para>
 Download the Opal2 source distribution from <ulink type="http"
 url="http://sourceforge.net/project/showfiles.php?group_id=211778&amp;package_id=297015">source forge</ulink>.
</para></listitem>

<listitem><para>
 Extract the downloaded tarball using the GNU tar (or similar utilities for Windows): 
<screen>
  tar zxvf opal-ws-$VERSION.tar.gz
</screen>
</para>
<para>
 This should create a new directory called opal-ws-$VERSION/ where
 all the sources are expanded. Henceforth, we refer to this directory as
 <emphasis role="italics">OPAL_HOME</emphasis>.
</para></listitem>

<listitem><para>
 A generic Java client for Opal services 
 lets you run any application exposed as an Opal service, and retrieve its status and outputs. 
 It is implemented by the GenericServiceClient class located in $OPAL_HOME/src/edu/sdsc/nbcr/opal. 
 To compile the client, run the following command from inside the $OPAL_HOME directory:
<screen>
  $ANT_HOME/bin/ant jar
</screen>
</para></listitem>

</orderedlist>

</simplesect>

<simplesect>
<title>Using the Command-line Client</title>

<itemizedlist>
<listitem><para>
<emphasis role="strong">Set your classpath</emphasis> (before runnign the client) using the
etc/classpath.bat, etc/classpath.csh or etc/classpath.sh script depending on the OS/shell you use - e.g. if you
use tcsh on Unix, set your classpath using the following command:
<screen>
    source etc/classpath.csh
</screen>
</para></listitem>

<listitem><para>
<emphasis role="strong">Get the client usage information</emphasis> by using the following command:
<screen>
    java edu.sdsc.nbcr.opal.GenericServiceClient
</screen>
</para></listitem>

<listitem><para>
<emphasis role="strong">To launch a job</emphasis> using the Date service mentioned in <xref linkend="deploy">, 
execute the following command, which displays the resulting job id, along with the preliminary status:
<screen>
    java edu.sdsc.nbcr.opal.GenericServiceClient \
                 -l http://localhost:8080/opal2/services/DateService \
                 -r launchJob \
                 -a \""-v1d -v3m -v0y -v-1d -u"\"
</screen>
</para>
<para>
If your arguments contain characters "-", you will have to put your
whole set of arguments within quotes that are escaped (\"..\"). If your
arguments don't have special characters you can use regular quotes ("..").
</para></listitem>

<listitem><para>
<emphasis role="strong">Retrieve job status</emphasis> by running the following command:
<screen>
    java edu.sdsc.nbcr.opal.GenericServiceClient \
                 -l http://localhost:8080/opal2/services/DateService \
                 -r queryStatus \
                 -j &lt;job_id&gt;
</screen>
</para></listitem>

<listitem><para>
<emphasis role="strong">Retrieve output</emphasis> once the job has finished: 
<screen>
    java edu.sdsc.nbcr.opal.GenericServiceClient \
                 -l http://localhost:8080/opal2/services/DateService \
                 -r getOutputs \
                 -j &lt;job_id&gt;
</screen>
</para>
<para>
You may need to change the above URL if you used a different port, or
are running the client from another machine. 
</para></listitem>
</itemizedlist>

</simplesect>
</chapter>
