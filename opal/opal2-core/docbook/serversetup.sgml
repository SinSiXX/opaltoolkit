<chapter id="serversetup"  xreflabel="Server Set Up Guide">
<title>Opal Server Installation</title>

<para>Version: &version;</para>

<para>In this chapter we present how to install Opal server with basic functionalities.</para>

<section id="serverprerequisites" xreflabel="Sever Prerequisites">
<title>Prerequisites</title>

<para>The source distribution can be used to install both the server and
the command-line client sides on Unix and Windows platforms. The
prerequisites for the installation are as follows.</para>

<section id="server-client-pre" xreflabel="Common Prerequisites for Server and Client">
<title>Common Prerequisites for Server and Client</title>

<orderedlist> 
   <listitem><para>Java 1.6.x or higher: Download and install J2SE from <ulink type="http"
   url="http://www.oracle.com/technetwork/java/javase/downloads/index.html">
   http://www.oracle.com/technetwork/java/javase/downloads/index.html</ulink>,
   if you don't have it installed already. Add the Java bin directory to
   the environment variable PATH. Also set the environment variable
   JAVA_HOME to point to the top level directory of the JDK
   installation.</para></listitem>

   <listitem><para>Ant 1.7.1 or higher: Ant is a make-like utility for compiling Java
   programs. Install Ant from <ulink type="http" url="http://ant.apache.org/">
   http://ant.apache.org</ulink>. Set the environment variable <emphasis role="italics">ANT_HOME</emphasis>
   to point to your Ant installation.</para></listitem>

</orderedlist>
</section>

<section id="server-pre" xreflabel="Additional Prerequisites for Server">
<title>Additional Prerequisites for Server</title>

<para>Apart from the above packages, the server also requires the following
packages:</para>

<orderedlist>
   <listitem><para>Tomcat: Tomcat is a servlet container than can be used
   to host Opal Web services. Opal can be installed inside Tomcat versions
   7.0. You can download the binary version of Tomcat 7.X from 
   <ulink type="http" url="http://tomcat.apache.org/download-70.cgi">
   http://tomcat.apache.org/download-70.cgi</ulink>. Henceforth, for the purposes
   of this reference guide, we will refer to the location of the Tomcat
   installation as <emphasis role="italics">CATALINA_HOME</emphasis>.
   </para></listitem>
</orderedlist>

<para>The following packages are optional:</para>
<orderedlist>
   <listitem><para>MPI: If you plan to run your application in parallel, you will need
   a version of MPI. You will also need to make sure that your SSH keys are
   set up to be able to run MPI jobs without prompting for a password.</para></listitem>

   <listitem><para>RDBMS: By
   default, we use a Java-based in-memory and disk-based database (<ulink
   url="http://hsqldb.org/">HSQLDB</ulink>) to persist the state of the
   services. For production use, we recommend using a real database such as
   <ulink type="http"
   url="http://www.postgresql.org/">Postgres</ulink> (version 8.2.4 or
   higher 8.2 flavors), <ulink type="http"
   url="http://dev.mysql.com/downloads/">MySQL</ulink> (tested with version
   5.1.38). or <ulink type="http"
   url="http://www-01.ibm.com/software/data/db2/">DB2</ulink> (tested with
   version 8.2).</para></listitem>

   <listitem><para>Scheduler Tools: We have tested <ulink type="http"
   url="http://www.cs.wisc.edu/condor">Condor</ulink> for serial jobs only,
   and <ulink type="http"
   url="http://gridengine.sunsource.net/">SGE</ulink> for serial as well as
   parallel jobs.</para>

   <para>Another alternative to access schedulers is via the <ulink
   type="http" url="http://drmaa.org/">DRMAA</ulink> API. The Opal services
   can submit jobs to schedulers as long as they support the DRMAA API. We
   have only tested job submits to SGE via DRMAA.</para>

   <para>Opal can be set up to submit jobs directly to schedulers such as 
   Condor or <ulink type="http" 
   url="http://www.clusterresources.com/products/torque-resource-manager.php">
   TORQUE</ulink> simply by writing a shell script.</para>

</listitem>
</orderedlist>
</section>
</section>


<section id="serverinstall"  xreflabel="Server Installation">
<title>Installation Instructions</title>

<para>Download the source distribution of Opal2 for installation from
<ulink type="http"
url="http://sourceforge.net/project/showfiles.php?group_id=211778&amp;package_id=297015">
here</ulink>, if you don't have the appropriate version already.</para>

<para>Extract the downloaded tarball using the GNU tar utility (or other
similar utilities for Windows), as follows:

<screen>
    tar zxvf opal-ws-$VERSION.tar.gz
</screen>
</para>

<para>This should create a new directory called opal-ws-$VERSION/ where
all the sources are expanded. Henceforth, we refer to this directory as
<emphasis role="italics">OPAL_HOME</emphasis>.</para>

<orderedlist>
<listitem><para>Edit $OPAL_HOME/etc/opal.properties to configure the static container
properties correctly. It should look something like the following:</para>

<screen>
    # the base URL for the tomcat installation 
    # this is required since Java can't figure out the IP 
    # address if there are multiple network interfaces
    tomcat.url=http://localhost:8080

    # the path relative to $CATALINA_HOME (or absolute) 
    # where opal will look for the xml file to authomatically 
    # deploy 
    opal.deploy.path=deploy

    # parallel parameters
    num.procs=1
    mpi.run=/path/to/your/mpi

    # zip up input/output files, if set to true
    # data.archive=true

    # location of working directory relative to $CATALINA_HOME/webapps.
    # this could be a symbolic link to another location (which should be
    # NFS mounted if this is on a cluster). if this is a symlink, copy
    # etc/opal.xml to $CATALINA_HOME/conf/Catalina/localhost/opal.xml. if
    # the name of the symlink is changed to something other than "opal-jobs", 
    # modify the opal.xml accordingly
    # working.dir=opal-jobs

    # by default, opal doesn't allow the use of absolute paths in the command-line
    # set the following parameter to allow some exceptions
    # allowed.path.prefixes=/db/, /whatever/dir/, /another/one/

    # use this key to display how long to save user data on server
    opal.datalifetime=4 days

    # specify in seconds the hard limit for how long a job can run
    # only applicable if either DRMAA or Globus is being used, and if
    # the scheduler supports it (some old version of SGE ignore the 
    # parameter)
    # Please be aware that your application will be killed by the scheduler 
    # once it reaches the specified limit (in same case without any log)
    opal.hard_limit=3600

    # full qualified class name (FQCN) of the job manager being used
    opal.jobmanager=edu.sdsc.nbcr.opal.manager.ForkJobManager
    # opal.jobmanager=edu.sdsc.nbcr.opal.manager.DRMAAJobManager
    # opal.jobmanager=edu.sdsc.nbcr.opal.manager.GlobusJobManager
    # opal.jobmanager=edu.sdsc.nbcr.opal.manager.RemoteGlobusJobManager
    # opal.jobmanager=edu.sdsc.nbcr.opal.manager.CondorJobManager
    # opal.jobmanager=edu.sdsc.nbcr.opal.manager.CSFJobManager

    ...
</screen>


<para>Set the <filename>tomcat.url</filename> to the correct
<filename>http://ip-address:port</filename> of the server. If the Opal
installation will support parallel applications, set the
<filename>num.procs</filename> to the number of processors available, and
the <filename>mpi.run</filename> to the location of the mpirun on your
host. </para>

<para>By default, all new working directories for job executions are created
inside the $CATALINA_HOME/webapps/ROOT directory. You may wish to change
this to another location on your system (which should be NFS mounted, if
you are installing on a cluster). If you would like to do so for any
reason, uncomment the property <filename>working.dir</filename>. Then run the following
commands:
<screen>
    cp $OPAL_HOME/etc/opal.xml $CATALINA_HOME/conf/Catalina/localhost/ 
    cd $CATALINA_HOME/webapps 
    ln -s /path/to/working_dir/on/nfs opal-jobs
</screen>
</para>

<para>Note that the above use of symbolic links will only work on Unix
systems. </para>

<para>If you wish to install a database to persist service state, please refer
to <xref linkend="database">. If you would like to set up
scheduler support, refer to <xref linkend="scheduler">.
You can also optionally set up secure access to your services by consulting
<xref linkend="security">.</para> </listitem>

<listitem><para>Edit the $OPAL_HOME/build.properties file to ensure that the build
properties are set correctly. Set <filename>catalina.home</filename> to point to the
location of your Tomcat installation (i.e. $CATALINA_HOME), and
<filename>tomcat.port</filename> to the port number that the Tomcat server is running
on.</para> </listitem>

<listitem><para>Install the Opal toolkit into the Tomcat installation, by executing
the following command:
<screen>
    ant install
</screen>
</para> </listitem>

<listitem><para>If you are using Tomcat 5.5.X, you have to enable directory listing to properly 
display jobs outputs. For this look in the file $CATALINA_HOME/conf/web.xml for the definition 
of the main servlet:
<screen>

    &lt;servlet&gt;
        &lt;servlet-name&gt;default&lt;/servlet-name&gt;
        &lt;servlet-class&gt;
          org.apache.catalina.servlets.DefaultServlet
        &lt;/servlet-class&gt;
        &lt;init-param&gt;
            &lt;param-name&gt;debug&lt;/param-name&gt;
            &lt;param-value&gt;0&lt;/param-value&gt;
        &lt;/init-param&gt;
        &lt;init-param&gt;
            &lt;param-name&gt;listings&lt;/param-name&gt;
            &lt;param-value&gt;false&lt;/param-value&gt;
        &lt;/init-param&gt;
        &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;
    &lt;/servlet&gt;

</screen>
</para><para>
And make sure that the "param-name" is set to true as follows:
<screen>
            &lt;param-name&gt;listings&lt;/param-name&gt; 
            &lt;param-value&gt;true&lt;/param-value&gt;
</screen>
</para></listitem>

<listitem><para>Set your JAVA_OPTS to "-Djava.awt.headless=true" to enable
Tomcat to run in headless mode. Run the Tomcat server by changing to the
$CATALINA_HOME/bin directory, and running the appropriate command (bat on
Windows, sh on Unix):
<screen>
    ./startup.bat|sh
</screen>
</para>
</listitem>

<listitem><para>Validate that Opal has been installed correctly by clicking
on <ulink type="http" url="http://localhost:8080/opal2/happyaxis.jsp">
http://localhost:8080/opal2/happyaxis.jsp</ulink>. If you have deployed
Tomcat on another port, you will have to change the port number above. If
all the <emphasis role="bold">Needed Components</emphasis> are found, Axis
has been deployed fine. You can ignore the warnings about the <emphasis
role="bold">Optional Components</emphasis>.</para> </listitem>

<listitem><para>If the above steps have been executed successfully, the
Opal server is ready for deployment of applications as Web
services.</para></listitem>

</orderedlist>

</section>

<section id="deploy" xreflabel="Application Deployment">
<title>Application Deployment</title>

<orderedlist>
<listitem>
<para>
For every application that needs to be deployed as an Opal service, you
will need to create an Opal configuration file. A sample configuration file
for the command <command>/bin/date</command>, located in
<filename>$OPAL_HOME/configs/date.xml</filename>, is shown below.
</para>

<para>
<screen>
&lt;appConfig xmlns="http://nbcr.sdsc.edu/opal/types"
           xmlns:xsd="http://www.w3.org/2001/XMLSchema"&gt;
  &lt;metadata&gt;
    &lt;usage&gt;&lt;![CDATA[date [-u] mmddhhmm[[cc]yy]]]&gt;&lt;/usage&gt;
  &lt;/metadata&gt;
  &lt;binaryLocation&gt;/bin/date&lt;/binaryLocation&gt;
  &lt;defaultArgs&gt;&lt;/defaultArgs&gt;
  &lt;validateArgs&gt;false&lt;/validateArgs&gt;
  &lt;jobManagerFQCN&gt;edu.sdsc.nbcr.opal.manager.ForkJobManager&lt;/jobManagerFQCN&gt;
  &lt;parallel&gt;false&lt;/parallel&gt;
&lt;/appConfig&gt;
</screen>
</para>

<para>The configuration consists of a top level element <emphasis
role="italics">appConfig</emphasis>, which contains <emphasis
role="italics">metadata</emphasis>, <emphasis
role="italics">binaryLocation</emphasis>, <emphasis
role="italics">defaultArgs</emphasis>, <emphasis
role="italics">parallel</emphasis>, <emphasis
role="italics">validateArgs</emphasis>, and <emphasis
role="italics">jobManagerFQCN</emphasis> elements. The metadata consists of
<emphasis role="italics">usage</emphasis>, which is a string specifying how
the application is to be invoked, and an array of optional application
information specified as <emphasis role="italics">info</emphasis> elements.
It also contains an optional <emphasis role="italics">types</emphasis>
element, which we can ignore for now (more information about the types
element can be found from our <xref linkend="opalgui-advancedsub"> page).
In the above file, the various options that can be used with the
application are specified within the metadata.</para>

<para>The binaryLocation specifies the location of the application binary -
note that this has to be the location of a <emphasis
role="italics">single</emphasis> executable. No arguments may be specified
here. However, default arguments that need to be used for every run can be
specified inside the defaultArgs element. The parallel element specifies if
an application is parallel or not. The validateArgs and jobManagerFQCN
elements are optional. If set to true, the validateArgs element instructs
Opal to use the optional command-line specification (within types) to
validate arguments prior to execution. The jobManagerFQCN element
over-rides the default job manager, and can be set to the fully qualified
classname of an Opal job manager. By default, the FQCNs for job managers
provided by Opal are
<filename>edu.sdsc.nbcr.opal.manager.ForkJobManager</filename> (for basic
fork/system exec),
<filename>edu.sdsc.nbcr.opal.manager.DRMAAJobManager</filename> (for
DRMAA), <filename>edu.sdsc.nbcr.opal.manager.GlobusJobManager</filename>
(for Globus on a local cluster),
<filename>edu.sdsc.nbcr.opal.manager.RemoteGlobusJobManager</filename> (for
Globus job submissions to a remote cluster),
<filename>edu.sdsc.nbcr.opal.manager.CondorJobManager</filename> (for
submitting jobs directly to Condor) and
<filename>edu.sdsc.nbcr.opal.manager.CSFJobManager</filename> (for using
the Community Scheduler Framework). Use the pdb2pqr_config.xml as a
guideline to write configurations for your particular applications.</para>

<para>
For a more detailed application configuration, including specification of
the command-line arguments, please see <xref linkend="sample-appconfig">.
</para>

</listitem>

<listitem>

<para>Deploy the services inside Tomcat, by copying the date.xml file inside the 
directory specified in opal.properties with the keyword opal.deploy.path. 
If you have not changed that property the default directory is $CATALINA_HOME/deploy.
<screen>
    cp configs/date.xml $CATALINA_HOME/deploy
</screen>
</para>

<para>
If the service is deployed successfully, it can be accessed
programmatically at URL:
<emphasis>http://host:port/opal2/services/serviceName</emphasis>, or via
the Web-based Opal Dashboard at URL:
<emphasis>http://host:port/opal2/dashboard</emphasis>.
</para>

<para>You can undeploy your service at any time simply by deleting the file:
<screen>
    rm $CATALINA_HOME/deploy/date.xml
</screen>
</para>


<para>If you plan on using the service with large inputs and outputs, it is a
good idea to increase the heap size being used by the JVM. This can be done
by setting the <emphasis role="italics">JAVA_OPTS</emphasis> environment variable to <emphasis role="ital
ics">-Xmx1024m</emphasis>,
and restarting Tomcat. This increases the heap size to 1GB. If all went
well until this step, the services are running and ready to be used. Test
them by running the client, described in the following section.</para>

<para>The service creates new working directories for every execution. These
working directories are not deleted automatically, so they must be
periodically cleaned up. You may use the script
$OPAL_HOME/etc/cleanup.sh to do so - you will have to modify it to point
to your Tomcat installation (and optionally modify the number of days to
retain scratch directories).</para>

</listitem>
</orderedlist>
</section>

</chapter>
