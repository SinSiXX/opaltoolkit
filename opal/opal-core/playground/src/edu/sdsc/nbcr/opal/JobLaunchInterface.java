package edu.sdsc.nbcr.opal;

import java.io.File;
import java.util.Properties;

/**
 * Interface for the job Launcer plugin for Opal 2.0 or >
 * 
 * My idea is having one instance of this class for every application, you basically 
 * call the constructor for this class in the constructor of AppServiceImpl. 
 *
 */
public interface JobLaunchInterface {

    
    /*-----------   begin general methods to manage the status of the launcher   ----------------*/
    /**
     * @param props the properties file containing the value to configure this plugin
     * 
     * @return null if the initialization was sucessful a string containing the error otherwise
     */
    public String initJobLaunch(Properties props, OpalApplication apps);//maybe this can just be the constructor of this class
    
    /**
     * @return the name of this plugin
     */
    public String getJobLaunchName();
    
    /**
     * @return a textual description for this plugin
     */
    public String getJobLaunchDescription();
    
    /**
     * called to destroy the plugin, it closes connections, 
     * save the state, (maybe kill the running job?), and whatever 
     * else you can think about
     *  
     * @return null if success otherwise a String containing the error
     */
    public String destroyJobLaunch();
    
    /* ----------------------   end general method    --------------------------------*/

    
    /* ----------------------  begin methods to handle jobs execution -------------------*/
    /**
     * 
     * @param arglist a string containing the command line used to launch the application
     * @param numproc the number of processors requested 
     * @param wd String representing the working directory of this job on the local system
     * @param inputFiles list of input file declared by the user when launching the job
     * 
     * @return the job ID
     */
    public String launchJob(String arglist, int numproc, String wd, String [] inputFiles );

    /**
     * 
     * @param arglist a string containing the command line used to launch the application
     * @param numproc the number of processors requested 
     * @param wd String representing the working directory of this job on the local system
     * @param inputFiles list of input file declared by the user when launching the job
     * 
     * @return the job ID
     */
    public String launchJobBlocking(String arglist, int numproc, String wd, String [] inputFiles, OpalApplication apps );

    /**
     * 
     * @param jobID 
     * @return
     */
    public JobStatus queryStatus(String jobID, OpalApplication apps);

    /**
     * Provide a list of out file name generated by a particular job
     *  
     * @param jobID the job ID that you want to retrive a list of output files
     * @return an array of string containing a list of filename
     */
    public String[] getOutputs(String jobID, OpalApplication apps);
    
    
    /**
     * 
     * @param jobID the ID of the job 
     * @param fileName the filename of the file that you want to retrive
     * 
     * @return a path like I did with File or a FileInputStream? maybe you can even stream 
     * the file contenet directly without staging on the local filesystem 
     */
    public File getOutputAsBase64ByName(String jobID, String fileName, OpalApplication apps);

    /**
     * 
     * @param jobID the id of the job that you want to destroi
     * @return
     */
    public JobStatus destroy(String jobID, OpalApplication apps);
    /* ----------------------  end methods to handle jobs execution -------------------*/
    

}
